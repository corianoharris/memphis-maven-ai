'use client';

import { useState, useEffect, useRef } from 'react';
import { useTranslation } from 'react-i18next';
import Image from 'next/image';

interface Message {
  id: string;
  role: 'user' | 'assistant';
  text: string;
  timestamp: string;
  relevantPages?: Array<{
    title: string;
    url: string;
    similarity: number;
  }>;
  attachedFiles?: Array<{
    name: string;
    size: number;
    type: string;
    preview?: string | null;
  }>;
  images?: Array<{
    url: string;
    alt?: string;
    caption?: string;
  }>;
}

interface ChatResponse {
  answer: string;
  conversationId: string;
  language: string;
  languageCode: string;
  confidence: number;
  relevantPages: Array<{
    title: string;
    url: string;
    similarity: number;
  }>;
  timestamp: string;
}

export default function Home() {
  const { t, i18n } = useTranslation();
  const [messages, setMessages] = useState<Message[]>([]);
  const [input, setInput] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [conversationId, setConversationId] = useState<string | null>(null);
  const [userId] = useState(() => `user_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`);
  const [isListening, setIsListening] = useState(false);
  const [isSupported, setIsSupported] = useState(false);
  const [voiceCommand, setVoiceCommand] = useState<string | null>(null);
  const [showChat, setShowChat] = useState(false);
  const [showNotifications, setShowNotifications] = useState(true);
  const [showMenu, setShowMenu] = useState(false);
  const [showDropdown, setShowDropdown] = useState(false);
  const [quickAccessData, setQuickAccessData] = useState<any>(null);
  const [expandedResources, setExpandedResources] = useState<{[key: string]: boolean}>({});
  const [images, setImages] = useState<string[]>([]);
  const [currentImageIndex, setCurrentImageIndex] = useState(0);
  const [showImageSlider, setShowImageSlider] = useState(false);
  const [formattedTimes, setFormattedTimes] = useState<{[key: string]: string}>({});
  const [isClient, setIsClient] = useState(false);
  const [showEmojiPicker, setShowEmojiPicker] = useState(false);
  const [attachedFiles, setAttachedFiles] = useState<File[]>([]);
  const [filePreviews, setFilePreviews] = useState<{[key: string]: string}>({});
  const [loadingImages, setLoadingImages] = useState<Set<string>>(new Set());
  const [expandedImage, setExpandedImage] = useState<string | null>(null);
  const [showImageModal, setShowImageModal] = useState(false);
  const [modalImageSrc, setModalImageSrc] = useState<string>('');
  const [analyzingImage, setAnalyzingImage] = useState<string | null>(null);
  const [imageLoadingStates, setImageLoadingStates] = useState<{[key: string]: boolean}>({});
  const [showLanguageSelector, setShowLanguageSelector] = useState(false);
  const [selectedLanguage, setSelectedLanguage] = useState<'en' | 'es' | 'ar'>('en');
  const messagesEndRef = useRef<HTMLDivElement>(null);
  const recognitionRef = useRef<SpeechRecognition | null>(null);
  const fileInputRef = useRef<HTMLInputElement>(null);

  // Language change handler
  const changeLanguage = (lang: string) => {
    i18n.changeLanguage(lang);
    setSelectedLanguage(lang);
    setInput(''); // Clear input when language changes
  };
    const translations = {
      en: {
        'ui.title': 'Chat with Beale',
        'ui.subtitle': '• Help and harmony — straight from Beale',
        'ui.onlineStatus': "We're online!",
        'ui.howCanIHelp': 'How can I help?',
        'ui.selectLanguage': 'Select Language',
        'ui.quickAccess': 'Quick Access',
        'ui.communityServices': 'Community Services',
        'ui.cityServices': 'City Services',
        'ui.emergency': 'Emergency',
        'ui.waitTime': 'Wait:',
        'ui.immediate': 'Immediate',
        'ui.min': 'min',
        'ui.varies': 'Varies',
        'ui.callForWaitTime': 'Call for current wait time',
        'ui.poweredBy': 'POWERED BY',
        'ui.welcome': 'Welcome to Beale!',
        'ui.welcomeMessage': "I'm here to help with Memphis city services, report issues, and answer questions in English, Spanish, or Arabic.",
        'ui.welcomeGreeting': "Hey! I'm Beale, straight from Beale Street",
        'ui.welcomeDescription': "I'm here to help out with whatever Memphis city services you need - whether it's reporting potholes, getting permits, or just figuring out how to get stuff done around here.",
        'ui.welcomeLanguages': "I speak English, Spanish, and Arabic - so whatever language you prefer, we're good to go!",
        'ui.bealeThinking': "Beale is cooking up an answer...",
        'ui.relevantResources': "Relevant Resources",
        'ui.relevance': "Relevance",
        'ui.socialMediaCenter': "Social Media Center",
        'ui.call311': "Call 311",
        'ui.loansAndGrants': "Loans and Grants",
        'ui.housingCommunityDev': "Housing and Community Development",
        'ui.government': "Government",
        'ui.enterMessage': 'Enter your message...',
        'ui.sendMessage': 'Send message',
        'ui.exampleQuestions': 'Example Questions:',
        'ui.examplePotholeSlider': 'How do I report a pothole?',
        'ui.exampleTrashSlider': 'When is my garbage pickup?',
        'ui.exampleTrashSpanish': '¿Cuándo es mi recolección de basura?',
        'ui.exampleTrashArabic': 'متى يكون يوم جمع القمامة الخاص بي؟',
        'ui.examplePermitSlider': 'How do I get a parking permit?',
        'ui.examplePermitSpanish': '¿Cómo obtengo un permiso de estacionamiento?',
        'ui.examplePermitArabic': 'كيف أحصل على تصريح وقوف؟',
        'ui.howToUse': 'How to Use',
        'ui.howToUseMemphis': 'Beale',
        'ui.voiceInputAvailable': 'Voice input available',
        'ui.clickToClose': 'Click to close this menu',
        'ui.multilingualHelp': 'Get help in English, Spanish, or Arabic',
        'greeting': "Hey y'all! I'm Beale, straight from the heart of Memphis. I'm here to help y'all with city services, report issues, and answer questions in English, Spanish, or Arabic. Let's keep Memphis smooth and take care of business together!"
      },
      es: {
        'ui.title': 'Chatea con Beale',
        'ui.subtitle': '• Ayuda y armonía — directo desde Beale',
        'ui.onlineStatus': '¡Estamos en línea!',
        'ui.howCanIHelp': '¿Cómo puedo ayudar?',
        'ui.selectLanguage': 'Seleccionar Idioma',
        'ui.quickAccess': 'Acceso Rápido',
        'ui.communityServices': 'Servicios Comunitarios',
        'ui.cityServices': 'Servicios de la Ciudad',
        'ui.emergency': 'Emergencia',
        'ui.waitTime': 'Espera:',
        'ui.immediate': 'Inmediato',
        'ui.min': 'min',
        'ui.varies': 'Varía',
        'ui.callForWaitTime': 'Llama para tiempo de espera actual',
        'ui.poweredBy': 'IMPULSADO POR',
        'ui.welcome': '¡Bienvenido a Beale!',
        'ui.welcomeMessage': 'Estoy aquí para ayudarles con los servicios de la ciudad de Memphis, reportar problemas y responder preguntas en inglés, español o árabe.',
        'ui.welcomeGreeting': '¡Hola! Soy Beale, directo de Beale Street',
        'ui.welcomeDescription': 'Estoy aquí para ayudarte con cualquier servicio de la ciudad de Memphis que necesites - ya sea reportar baches, obtener permisos, o simplemente averiguar cómo hacer las cosas aquí.',
        'ui.welcomeLanguages': '¡Hablo inglés, español y árabe - así que en el idioma que prefieras, estamos listos!',
        'ui.bealeThinking': 'Beale está preparando una respuesta...',
        'ui.relevantResources': 'Recursos Relevantes',
        'ui.relevance': 'Relevancia',
      'ui.socialMediaCenter': 'Centro de Redes Sociales',
      'ui.call311': 'Llamar al 311',
      'ui.loansAndGrants': 'Préstamos y Subvenciones',
      'ui.housingCommunityDev': 'Vivienda y Desarrollo Comunitario',
      'ui.government': 'Gobierno',
      'ui.officeCommunityAffairs': 'Oficina de Asuntos Comunitarios',
      'ui.communityAffairs': 'Asuntos Comunitarios',
      'ui.call511': 'Llamar al 511',
      'ui.transportation': 'Transporte',
      'ui.publicWorks': 'Obras Públicas',
      'ui.healthDepartment': 'Departamento de Salud',
      'ui.emergencyServices': 'Servicios de Emergencia',
        'ui.enterMessage': 'Ingresa tu mensaje...',
        'ui.sendMessage': 'Enviar mensaje',
        'ui.exampleQuestions': 'Preguntas de Ejemplo:',
        'ui.examplePotholeSlider': '¿Cómo reporto un bache?',
        'ui.exampleTrashSlider': '¿Cuándo es mi recolección de basura?',
        'ui.exampleTrashSpanish': '¿Cuándo es mi recolección de basura?',
        'ui.exampleTrashArabic': 'متى يكون يوم جمع القمامة الخاص بي؟',
        'ui.examplePermitSlider': '¿Cómo obtengo un permiso de estacionamiento?',
        'ui.examplePermitSpanish': '¿Cómo obtengo un permiso de estacionamiento?',
        'ui.examplePermitArabic': 'كيف أحصل على تصريح وقوف؟',
        'ui.howToUse': 'Cómo Usar',
        'ui.howToUseMemphis': 'Beale',
        'ui.voiceInputAvailable': 'Entrada de voz disponible',
        'ui.clickToClose': 'Haz clic para cerrar este menú',
        'ui.multilingualHelp': 'Obtén ayuda en inglés, español o árabe',
        'greeting': "¡Hola Memphis! Soy Beale, directo desde el corazón de Memphis. Estoy aquí para ayudarles con servicios de la ciudad, reportar problemas y responder preguntas en inglés, español o árabe. ¡Mantengamos Memphis fluido y arreglemos todo juntos!"
      },
      ar: {
        'ui.title': 'تحدث مع Beale',
        'ui.subtitle': '• المساعدة والانسجام — مباشرة من Beale',
        'ui.onlineStatus': 'نحن متصلون!',
        'ui.howCanIHelp': 'كيف يمكنني المساعدة؟',
        'ui.selectLanguage': 'اختيار اللغة',
        'ui.quickAccess': 'الوصول السريع',
        'ui.communityServices': 'الخدمات المجتمعية',
        'ui.cityServices': 'خدمات المدينة',
        'ui.emergency': 'طوارئ',
        'ui.waitTime': 'الانتظار:',
        'ui.immediate': 'فوري',
        'ui.min': 'دقيقة',
        'ui.varies': 'يختلف',
        'ui.callForWaitTime': 'اتصل لمعرفة وقت الانتظار الحالي',
        'ui.poweredBy': 'مدعوم بواسطة',
        'ui.welcome': 'مرحباً بك في Beale!',
        'ui.welcomeMessage': 'أنا هنا لمساعدتك في خدمات مدينة ممفيس، الإبلاغ عن المشاكل والإجابة على الأسئلة باللغة الإنجليزية أو الإسبانية أو العربية.',
        'ui.welcomeGreeting': 'مرحباً! أنا Beale، مباشرة من شارع Beale',
        'ui.welcomeDescription': 'أنا هنا لمساعدتك في أي خدمات مدينة ممفيس تحتاجها - سواء كان الإبلاغ عن الحفر، الحصول على تصاريح، أو مجرد معرفة كيفية إنجاز الأمور هنا.',
        'ui.welcomeLanguages': 'أتحدث الإنجليزية والإسبانية والعربية - لذا بأي لغة تفضلها، نحن مستعدون!',
        'ui.bealeThinking': 'Beale يحضر إجابة...',
        'ui.relevantResources': 'الموارد ذات الصلة',
        'ui.relevance': 'الصلة',
      'ui.socialMediaCenter': 'مركز وسائل التواصل الاجتماعي',
      'ui.call311': 'اتصل بـ 311',
      'ui.loansAndGrants': 'القروض والمنح',
      'ui.housingCommunityDev': 'الإسكان والتنمية المجتمعية',
      'ui.government': 'الحكومة',
      'ui.officeCommunityAffairs': 'مكتب الشؤون المجتمعية',
      'ui.communityAffairs': 'الشؤون المجتمعية',
      'ui.call511': 'اتصل بـ 511',
      'ui.transportation': 'النقل',
      'ui.publicWorks': 'الأشغال العامة',
      'ui.healthDepartment': 'إدارة الصحة',
      'ui.emergencyServices': 'خدمات الطوارئ',
        'ui.enterMessage': 'أدخل رسالتك...',
        'ui.sendMessage': 'إرسال الرسالة',
        'ui.exampleQuestions': 'أسئلة مثال:',
        'ui.examplePotholeSlider': 'كيف أبلغ عن حفرة في الطريق؟',
        'ui.exampleTrashSlider': 'متى يكون يوم جمع القمامة الخاص بي؟',
        'ui.exampleTrashSpanish': '¿Cuándo es mi recolección de basura?',
        'ui.exampleTrashArabic': 'متى يكون يوم جمع القمامة الخاص بي؟',
        'ui.examplePermitSlider': 'كيف أحصل على تصريح وقوف؟',
        'ui.examplePermitSpanish': '¿Cómo obtengo un permiso de estacionamiento?',
        'ui.examplePermitArabic': 'كيف أحصل على تصريح وقوف؟',
        'ui.howToUse': 'كيفية الاستخدام',
        'ui.howToUseMemphis': 'Beale',
        'ui.voiceInputAvailable': 'إدخال الصوت متاح',
        'ui.clickToClose': 'انقر لإغلاق هذه القائمة',
        'ui.multilingualHelp': 'احصل على مساعدة باللغة الإنجليزية أو الإسبانية أو العربية',
        'greeting': 'مرحباً ممفيس! أنا Beale، مباشرة من قلب ممفيس. أنا هنا لمساعدتك في خدمات المدينة، الإبلاغ عن المشاكل والإجابة على الأسئلة باللغة الإنجليزية أو الإسبانية أو العربية. دعنا نحافظ على ممفيس سلسة ونعالج الأمور معاً!'
      }

  // Function to translate resource titles with automatic key generation
  const translateResourceTitle = (title: string) => {
    // Create a key from the title by removing special characters and spaces
    const key = title.replace(/[^a-zA-Z0-9]/g, '_');
    
    // Try to get translation with fallback to original title
    const translatedTitle = t(`resources.${key}`, { defaultValue: title });
    
    // If the translation key doesn't exist, return the original title
    return translatedTitle !== `resources.${key}` ? translatedTitle : title;
  };

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  // Set client flag after hydration
  useEffect(() => {
    setIsClient(true);
  }, []);

  // Fetch Quick Access data
  useEffect(() => {
    const fetchQuickAccessData = async () => {
      try {
        const response = await fetch('/api/quick-access');
        const data = await response.json();
        if (data.success) {
          setQuickAccessData(data.data);
        }
      } catch (error) {
        console.error('Failed to fetch Quick Access data:', error);
      }
    };

    fetchQuickAccessData();
    
    // Refresh data every 5 minutes
    const interval = setInterval(fetchQuickAccessData, 5 * 60 * 1000);
    return () => clearInterval(interval);
  }, []);

  // Format times on client side to avoid hydration mismatch
  useEffect(() => {
    if (!isClient) return;
    
    const times: {[key: string]: string} = {};
    messages.forEach(message => {
      // Use a more stable time format that's consistent
      const date = new Date(message.timestamp);
      const hours = date.getHours();
      const minutes = date.getMinutes();
      const ampm = hours >= 12 ? 'PM' : 'AM';
      const displayHours = hours % 12 || 12;
      const displayMinutes = minutes.toString().padStart(2, '0');
      times[message.id] = `${displayHours}:${displayMinutes} ${ampm}`;
    });
    setFormattedTimes(times);
  }, [messages, isClient]);

  // Initialize speech recognition
  useEffect(() => {
    if (typeof window !== 'undefined') {
      const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
      if (SpeechRecognition) {
        setIsSupported(true);
        const recognition = new SpeechRecognition();
        recognition.continuous = false;
        recognition.interimResults = false;
        recognition.lang = 'en-US';
        
        recognition.onstart = () => {
          setIsListening(true);
        };
        
        recognition.onresult = (event) => {
          const transcript = event.results[0][0].transcript;
          setInput(transcript);
          setIsListening(false);
          
          // Check if user said a send command
          const sendCommands = ['send', 'send message', 'go', 'submit', 'enter'];
          const shouldAutoSend = sendCommands.some(cmd => 
            transcript.toLowerCase().includes(cmd)
          );
          
          if (shouldAutoSend) {
            // Show voice command feedback
            setVoiceCommand('Sending...');
            
            // Remove the send command from the input
            const cleanTranscript = transcript
              .replace(/\b(send|send message|go|submit|enter)\b/gi, '')
              .trim();
            setInput(cleanTranscript);
            
            // Auto-send after a short delay
            setTimeout(() => {
              if (cleanTranscript) {
                sendMessage();
                setVoiceCommand(null);
              }
            }, 300);
          } else {
            // Auto-send the message after a longer delay for regular speech
            setTimeout(() => {
              if (transcript.trim()) {
                sendMessage();
              }
            }, 1500);
          }
        };
        
        recognition.onerror = (event) => {
          console.error('Speech recognition error:', event.error);
          setIsListening(false);
        };
        
        recognition.onend = () => {
          setIsListening(false);
        };
        
        recognitionRef.current = recognition;
      }
    }
  }, []);

  const sendMessage = async () => {
    if ((!input.trim() && attachedFiles.length === 0) || isLoading) return;
    
    // Ensure we have either text input or attached files
    const hasTextInput = input.trim().length > 0;
    const hasFiles = attachedFiles.length > 0;
    
    if (!hasTextInput && !hasFiles) return;

    // Check if any images are still loading or don't have previews
    const imageFiles = attachedFiles.filter(f => f.type.startsWith('image/'));
    const stillLoading = imageFiles.filter(f => loadingImages.has(f.name));
    const missingPreviews = imageFiles.filter(f => !filePreviews[f.name]);
    
    if (stillLoading.length > 0 || missingPreviews.length > 0) {
      console.log('Waiting for image previews to load...', { stillLoading, missingPreviews });
      return;
    }

    console.log('Sending message with attached files:', attachedFiles);
    console.log('File previews:', filePreviews);

    const userMessage: Message = {
      id: Date.now().toString(),
      role: 'user',
      text: input.trim() || (attachedFiles.length > 0 ? '' : ''),
      timestamp: new Date().toISOString(),
      attachedFiles: attachedFiles.length > 0 ? attachedFiles.map(f => {
        console.log('Mapping file:', f.name, 'Preview available:', !!filePreviews[f.name], 'Preview data:', filePreviews[f.name]?.substring(0, 50) + '...');
        return { 
          name: f.name, 
          size: f.size, 
          type: f.type,
          preview: filePreviews[f.name] || null
        };
      }) : []
    };

    console.log('User message with attached files:', userMessage);

    console.log('User message created:', userMessage);

    setMessages(prev => [...prev, userMessage]);
    setInput('');
    setAttachedFiles([]); // Clear attached files after sending
    setFilePreviews({}); // Clear file previews after sending
    setLoadingImages(new Set()); // Clear loading state after sending
    setImageLoadingStates({}); // Clear image loading states after sending
    setIsLoading(true);

    try {
      const requestBody = {
        userId,
        question: input.trim() || (attachedFiles.length > 0 ? 'I have shared some files that need to be analyzed. Please help me understand what they contain and how they relate to Memphis city services.' : ''),
        conversationId,
        language: selectedLanguage
      };
      
      console.log('Sending request to /api/chat:', requestBody);
      
      const response = await fetch('/api/chat', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(requestBody),
      });

      if (!response.ok) {
        const errorData = await response.text();
        console.error('API Error Response:', response.status, errorData);
        throw new Error(`Failed to send message: ${response.status} - ${errorData}`);
      }

      const data: ChatResponse = await response.json();
      
      const assistantMessage: Message = {
        id: (Date.now() + 1).toString(),
        role: 'assistant',
        text: data.answer,
        timestamp: data.timestamp,
        relevantPages: data.relevantPages
      };

      setMessages(prev => [...prev, assistantMessage]);
      setConversationId(data.conversationId);
      
      // Auto-analyze any images that were attached to the user message
      if (userMessage.attachedFiles && userMessage.attachedFiles.length > 0) {
        const imageFiles = userMessage.attachedFiles.filter(file => file.type.startsWith('image/'));
        imageFiles.forEach(file => {
          if (file.preview) {
            // Add a small delay to let the assistant message appear first
            setTimeout(() => {
              if (file.preview) {
                analyzeImage(file.preview, file.name);
              }
            }, 1000);
          }
        });
      }
    } catch (error) {
      console.error('Error sending message:', error);
      const errorMessage: Message = {
        id: (Date.now() + 1).toString(),
        role: 'assistant',
        text: 'Sorry, I encountered an error. Please try again or call Memphis 311 at (901)636-6500.',
        timestamp: new Date().toISOString()
      };
      setMessages(prev => [...prev, errorMessage]);
    } finally {
      setIsLoading(false);
    }
  };

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      sendMessage();
    }
  };

  const startListening = () => {
    if (recognitionRef.current && !isListening) {
      recognitionRef.current.start();
    }
  };

  const stopListening = () => {
    if (recognitionRef.current && isListening) {
      recognitionRef.current.stop();
    }
  };

  const clearMessages = () => {
    setMessages([]);
    setConversationId(null);
  };

  const handleImageUpload = (event: React.ChangeEvent<HTMLInputElement>) => {
    const files = event.target.files;
    if (files) {
      Array.from(files).forEach(file => {
        if (file.type.startsWith('image/')) {
          const reader = new FileReader();
          reader.onload = (e) => {
            const result = e.target?.result as string;
            setImages(prev => [...prev, result]);
          };
          reader.readAsDataURL(file);
        }
      });
    }
  };

  const openImageSlider = (index: number) => {
    setCurrentImageIndex(index);
    setShowImageSlider(true);
  };

  const nextImage = () => {
    setCurrentImageIndex((prev) => (prev + 1) % images.length);
  };

  const prevImage = () => {
    setCurrentImageIndex((prev) => (prev - 1 + images.length) % images.length);
  };

  const closeImageSlider = () => {
    setShowImageSlider(false);
  };

  const toggleMenu = () => {
    setShowMenu(!showMenu);
  };

  // Emoji picker functionality
  const toggleEmojiPicker = () => {
    if (isLoading) return; // Don't open emoji picker when loading
    setShowEmojiPicker(!showEmojiPicker);
  };

  const insertEmoji = (emoji: string) => {
    setInput(prev => prev + emoji);
    setShowEmojiPicker(false);
  };

  // File attachment functionality
  const handleFileSelect = (event: React.ChangeEvent<HTMLInputElement>) => {
    const files = Array.from(event.target.files || []);
    console.log('Files selected:', files);
    const maxSize = 10 * 1024 * 1024; // 10MB
    
    const validFiles = files.filter(file => {
      if (file.size > maxSize) {
        alert(`File "${file.name}" is too large. Maximum size is 10MB.`);
        return false;
      }
      return true;
    });
    
    console.log('Valid files:', validFiles);
    
    // Create previews for image files first
    const imageFiles = validFiles.filter(file => file.type.startsWith('image/'));
    if (imageFiles.length > 0) {
      // Add files immediately but mark images as loading
      setAttachedFiles(prev => {
        const newFiles = [...prev, ...validFiles];
        console.log('Updated attached files (with loading images):', newFiles);
        return newFiles;
      });
      
      // Track loading state for each image
      imageFiles.forEach(file => {
        setLoadingImages(prev => new Set([...prev, file.name]));
        
        const reader = new FileReader();
        reader.onload = (e) => {
          console.log('Preview created for:', file.name, 'Result:', e.target?.result);
          setFilePreviews(prev => ({
            ...prev,
            [file.name]: e.target?.result as string
          }));
          
          // Remove from loading state
          setLoadingImages(prev => {
            const newSet = new Set(prev);
            newSet.delete(file.name);
            return newSet;
          });
        };
        reader.readAsDataURL(file);
      });
    } else {
      // No images, just add files immediately
      setAttachedFiles(prev => {
        const newFiles = [...prev, ...validFiles];
        console.log('Updated attached files (no images):', newFiles);
        return newFiles;
      });
    }
  };

  const removeFile = (index: number) => {
    const fileToRemove = attachedFiles[index];
    setAttachedFiles(prev => prev.filter((_, i) => i !== index));
    
    // Remove preview if it exists
    if (fileToRemove && filePreviews[fileToRemove.name]) {
      setFilePreviews(prev => {
        const newPreviews = { ...prev };
        delete newPreviews[fileToRemove.name];
        return newPreviews;
      });
    }
    
    // Remove from loading state
    if (fileToRemove) {
      setLoadingImages(prev => {
        const newSet = new Set(prev);
        newSet.delete(fileToRemove.name);
        return newSet;
      });
    }
  };

  const triggerFileInput = () => {
    if (isLoading) return; // Don't open file input when loading
    console.log('Triggering file input, ref:', fileInputRef.current);
    fileInputRef.current?.click();
  };

  // Image expansion and modal functions
  const toggleImageExpansion = (imageSrc: string) => {
    if (expandedImage === imageSrc) {
      setExpandedImage(null);
    } else {
      setExpandedImage(imageSrc);
    }
  };

  const openImageModal = (imageSrc: string) => {
    setModalImageSrc(imageSrc);
    setShowImageModal(true);
  };

  const closeImageModal = () => {
    setShowImageModal(false);
    setModalImageSrc('');
  };

  // Analyze image and provide recommendations
  const analyzeImage = async (imageSrc: string, fileName: string) => {
    try {
      setAnalyzingImage(fileName);
      
      // Convert data URL to base64 for API
      const base64Data = imageSrc.split(',')[1];
      
      const response = await fetch('/api/analyze-image', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          image: base64Data,
          fileName: fileName,
          context: 'Memphis city services and community assistance'
        }),
      });

      if (!response.ok) {
        throw new Error('Failed to analyze image');
      }

      const analysis = await response.json();
      
      // Add analysis as a message from Memphis Maven
      const analysisMessage: Message = {
        id: Date.now().toString(),
        role: 'assistant',
        text: `🔍 **Image Analysis for ${fileName}**\n\n${analysis.analysis}\n\n**Recommendations:**\n${analysis.recommendations}\n\n**Next Steps:**\n${analysis.nextSteps}`,
        timestamp: new Date().toISOString(),
        images: analysis.relatedImages || []
      };

      setMessages(prev => [...prev, analysisMessage]);
      setAnalyzingImage(null);
      
    } catch (error) {
      console.error('Error analyzing image:', error);
      setAnalyzingImage(null);
      
      // Add error message
      const errorMessage: Message = {
        id: Date.now().toString(),
        role: 'assistant',
        text: `Sorry, I couldn't analyze the image "${fileName}" right now. Please try again or describe what you need help with regarding this image.`,
        timestamp: new Date().toISOString()
      };
      
      setMessages(prev => [...prev, errorMessage]);
    }
  };

  // Close emoji picker when clicking outside
  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (showEmojiPicker && !(event.target as Element).closest('.emoji-picker')) {
        setShowEmojiPicker(false);
      }
    };

    document.addEventListener('mousedown', handleClickOutside);
    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, [showEmojiPicker]);

  // Debug attached files
  useEffect(() => {
    console.log('Attached files updated:', attachedFiles);
  }, [attachedFiles]);

  // Close emoji picker when Memphis Maven starts thinking
  useEffect(() => {
    if (isLoading) {
      setShowEmojiPicker(false);
    }
  }, [isLoading]);

  // Set initial loading state for images when they're first displayed
  useEffect(() => {
    messages.forEach(message => {
      if (message.attachedFiles) {
        message.attachedFiles.forEach(file => {
          if (file.type.startsWith('image/') && file.preview && !(file.name in imageLoadingStates)) {
            console.log('Setting loading state for image in conversation:', file.name, 'Preview length:', file.preview.length);
            setImageLoadingStates(prev => ({
              ...prev,
              [file.name]: true
            }));
          }
        });
      }
      if (message.images) {
        message.images.forEach(image => {
          if (!(image.url in imageLoadingStates)) {
            setImageLoadingStates(prev => ({
              ...prev,
              [image.url]: true
            }));
          }
        });
      }
    });
  }, [messages]); // Removed imageLoadingStates dependency to prevent infinite loop



  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-100 to-gray-200 flex items-center justify-center p-4">
      {/* Chatbox Container */}
      <div className="w-full max-w-md mx-auto">
        {!showChat ? (
          /* Initial Greeting Screen */
          <div className="bg-transparent overflow-hidden">
            {/* Beale Sunset Image */}
            <div className="flex justify-center p-6">
              <img 
                src="/beale_no_background_sunset.png" 
                alt="Beale" 
                className="w-full max-w-sm h-auto object-contain"
              />
                    </div>
                    
            {/* Start Chatting Button */}
            <div className="px-6 pb-8 text-center">
                <button
                  onClick={() => setShowChat(true)}
                className="bg-blue-600 hover:bg-blue-700 text-white px-8 py-3 rounded-full font-medium transition-all duration-300 shadow-lg hover:shadow-xl transform hover:scale-105"
                >
                Start Chatting
                </button>
            </div>
          </div>
        ) : (
          /* Chat Interface */
          <div className="bg-white rounded-2xl shadow-2xl border border-gray-200 overflow-hidden transition-all duration-300">
            {/* Notification Center */}
            {showNotifications && (
              <div className="bg-gradient-to-r from-yellow-50 to-orange-50 border-b border-yellow-200 px-4 py-3">
                <div className="flex items-center justify-between mb-3">
                  <h3 className="text-sm font-semibold text-gray-800 tracking-wide">{t('ui.quickAccess')}</h3>
                  <button 
                    onClick={() => setShowNotifications(false)}
                    className="text-gray-500 hover:text-gray-700"
                  >
                    <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                    </svg>
                  </button>
                </div>
                <div className="grid grid-cols-3 gap-2">
                  <a 
                    href={`tel:${quickAccessData?.services?.['211']?.phone || '211'}`}
                    className={`px-3 py-2 rounded-lg text-center text-xs font-medium transition-colors shadow-md ${
                      quickAccessData?.services?.['211']?.status === 'busy' 
                        ? 'bg-orange-100 hover:bg-orange-200 text-orange-800' 
                        : 'bg-purple-100 hover:bg-purple-200 text-purple-800'
                    }`}
                  >
                    <div className="font-bold tracking-wide">211</div>
                    <div className="text-xs opacity-75 tracking-wide">{t('ui.communityServices')}</div>
                    <div className="text-xs opacity-60 tracking-wide">
                      {quickAccessData?.services?.['211']?.waitTime === 'Call for current wait time' ? t('ui.callForWaitTime') : 
                       quickAccessData?.services?.['211']?.waitTime === 'Immediate' ? t('ui.immediate') :
                       quickAccessData?.services?.['211']?.waitTime || t('ui.callForWaitTime')}
                    </div>
                  </a>
                  <a 
                    href={`tel:${quickAccessData?.services?.['311']?.phone || '901-636-6500'}`}
                    className={`px-3 py-2 rounded-lg text-center text-xs font-medium transition-colors shadow-md ${
                      quickAccessData?.services?.['311']?.status === 'busy' 
                        ? 'bg-orange-100 hover:bg-orange-200 text-orange-800' 
                        : 'bg-blue-100 hover:bg-blue-200 text-blue-800'
                    }`}
                  >
                    <div className="font-bold tracking-wide">311</div>
                    <div className="text-xs opacity-75 tracking-wide">{t('ui.cityServices')}</div>
                    <div className="text-xs opacity-60 tracking-wide">
                      {quickAccessData?.services?.['311']?.waitTime === 'Call for current wait time' ? t('ui.callForWaitTime') : 
                       quickAccessData?.services?.['311']?.waitTime === 'Immediate' ? t('ui.immediate') :
                       quickAccessData?.services?.['311']?.waitTime || t('ui.callForWaitTime')}
                    </div>
                  </a>
                  <a 
                    href={`tel:${quickAccessData?.services?.['911']?.phone || '911'}`}
                    className={`px-3 py-2 rounded-lg text-center text-xs font-medium transition-colors shadow-md ${
                      quickAccessData?.services?.['911']?.status === 'busy' 
                        ? 'bg-orange-100 hover:bg-orange-200 text-orange-800' 
                        : 'bg-red-100 hover:bg-red-200 text-red-800'
                    }`}
                  >
                    <div className="font-bold tracking-wide">911</div>
                    <div className="text-xs opacity-75 tracking-wide">{t('ui.emergency')}</div>
                    <div className="text-xs opacity-60 tracking-wide">
                      {quickAccessData?.services?.['911']?.waitTime === 'Call for current wait time' ? t('ui.callForWaitTime') : 
                       quickAccessData?.services?.['911']?.waitTime === 'Immediate' ? t('ui.immediate') :
                       quickAccessData?.services?.['911']?.waitTime || t('ui.immediate')}
                    </div>
                  </a>
                </div>
              </div>
            )}

            {/* Header */}
            <div className=" px-6 py-4">
              <div className="flex items-center justify-between">
                <div className="flex items-center space-x-3">
                  <div 
                    className="w-32 h-32 bg-transparent bg-opacity-20 rounded-full flex items-center justify-center overflow-visible cursor-help relative group"
                    title="Beale - Help and harmony straight from Beale"
                    onMouseEnter={() => console.log('Hovering over avatar')}
                  >
                    <img 
                      src="/beale_blue.png" 
                      alt="Beale Avatar" 
                      className="w-full h-full object-cover rounded-full"
                      onError={(e) => {
                        const target = e.target as HTMLImageElement;
                        target.style.display = 'none';
                        // Try SVG fallback
                        const fallback = target.parentElement?.querySelector('.fallback-svg') as HTMLImageElement;
                        if (fallback) {
                          fallback.style.display = 'block';
                        } else {
                          // Ultimate fallback to letter
                          const letterFallback = target.parentElement?.querySelector('.letter-fallback') as HTMLElement;
                          if (letterFallback) {
                            letterFallback.classList.remove('hidden');
                            letterFallback.classList.add('flex');
                          }
                        }
                      }}
                    />
                    {/* <img 
                      src="/Beale_blue.png" 
                      alt="Beale Avatar SVG" 
                      className="w-full h-full object-cover rounded-full hidden fallback-svg"
                      onError={(e) => {
                        const target = e.target as HTMLImageElement;
                        target.style.display = 'none';
                        // Ultimate fallback to letter
                        const letterFallback = target.parentElement?.querySelector('.letter-fallback') as HTMLElement;
                        if (letterFallback) {
                          letterFallback.classList.remove('hidden');
                          letterFallback.classList.add('flex');
                        }
                      }}
                    /> */}
                    {/* <div className="w-full h-full bg-white bg-opacity-20 rounded-full items-center justify-center hidden letter-fallback">
                      <span className="text-white font-bold text-xl">M</span>
                    </div> */}
                    
                  </div>
                  
                  <div>
                    <h2 className="text-gray-900 font-bold text-xl tracking-wide">Beale</h2>
                  </div>
                </div>
                <div className="flex items-center space-x-2">
                  {/* Language Selector */}
                  <div className="relative group">
                    <button 
                      onClick={() => setShowLanguageSelector(!showLanguageSelector)}
                      className="text-blue-600 hover:bg-blue-700 hover:text-white hover:bg-opacity-80 p-2 rounded-full transition-colors focus:outline-none focus:ring-2 focus:ring-blue-300 focus:ring-opacity-50 flex items-center space-x-1 shadow-md"
                    >
                      {/* Language Icon */}
                      <svg className="w-4 h-4" fill="currentColor" viewBox="0 0 24 24">
                        <path d="M12.87 15.07l-2.54-2.51.03-.03c1.74-1.94 2.98-4.17 3.71-6.53H17V4h-7V2H8v2H1v1.99h11.17C11.5 7.92 10.44 9.75 9 11.35 8.07 10.32 7.3 9.19 6.69 8h-2c.73 1.63 1.73 3.17 2.98 4.56l-5.09 5.02L4 19l5-5 3.11 3.11.76-2.04zM18.5 10h-2L12 22h2l1.12-3h4.75L21 22h2l-4.5-12zm-2.62 7l1.62-4.33L19.12 17h-3.24z"/>
                      </svg>
                      {/* Current Language Indicator */}
                      <span className="text-xs font-medium">
                        {selectedLanguage === 'en' ? 'EN' : selectedLanguage === 'es' ? 'ES' : 'AR'}
                      </span>
                    </button>
                    
                    {/* Tooltip */}
                    <div className="absolute bottom-full left-1/2 transform -translate-x-1/2 mb-2 px-2 py-1 bg-gray-800 text-white text-xs rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 pointer-events-none whitespace-nowrap z-50">
                      {t('ui.selectLanguage')}
                  </div>
                    
                    {/* Language Dropdown */}
                    {showLanguageSelector && (
                      <div className="absolute right-0 top-full mt-2 w-32 bg-white rounded-lg shadow-xl border border-gray-200 z-[9999]">
                        <div className="p-2">
                          <button
                            onClick={() => {
                              changeLanguage('en');
                              setShowLanguageSelector(false);
                            }}
                            className={`w-full text-left px-3 py-2 rounded text-sm transition-colors ${
                              selectedLanguage === 'en' ? 'bg-blue-100 text-blue-700' : 'text-gray-700 hover:bg-gray-100'
                            }`}
                          >
                            🇺🇸 English
                          </button>
                          <button
                            onClick={() => {
                              changeLanguage('es');
                              setShowLanguageSelector(false);
                            }}
                            className={`w-full text-left px-3 py-2 rounded text-sm transition-colors ${
                              selectedLanguage === 'es' ? 'bg-blue-100 text-blue-700' : 'text-gray-700 hover:bg-gray-100'
                            }`}
                          >
                            🇪🇸 Español
                          </button>
                          <button
                            onClick={() => {
                              changeLanguage('ar');
                              setShowLanguageSelector(false);
                            }}
                            className={`w-full text-left px-3 py-2 rounded text-sm transition-colors ${
                              selectedLanguage === 'ar' ? 'bg-blue-100 text-blue-700' : 'text-gray-700 hover:bg-gray-100'
                            }`}
                          >
                            🇸🇦 العربية
                          </button>
                </div>
                      </div>
                    )}
                  </div>
                  
                  <button 
                    onClick={clearMessages}
                    className="text-blue-600 hover:text-white hover:bg-blue-700 hover:bg-opacity-80 p-2 rounded-full transition-colors focus:outline-none focus:ring-2 focus:ring-blue-300 focus:ring-opacity-50 shadow-md"
                    title="Clear messages"
                  >
                        <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                        </svg>
                  </button>
                  <div className="relative">
                    <button 
                      onClick={() => setShowDropdown(!showDropdown)}
                      className="text-blue-600 hover:bg-blue-700 hover:text-white hover:bg-opacity-80 p-2 rounded-full transition-colors focus:outline-none focus:ring-2 focus:ring-blue-300 focus:ring-opacity-50 shadow-md"
                    >
                      <svg className="w-5 h-5" fill="currentColor" viewBox="0 0 24 24">
                        <path d="M12 8c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2zm0 2c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm0 6c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2z"/>
                      </svg>
                    </button>
                    
                    {/* Dropdown Menu */}
                    {showDropdown && (
                      <div className="absolute right-0 top-full mt-2 w-64 bg-white rounded-lg shadow-xl border border-gray-200 z-[9999]">
                        <div className="p-4">
                          <div className="font-bold text-lg mb-2 text-blue-600">{t('ui.howToUse')}</div>
                          <div className="font-semibold text-base mb-3 text-gray-800">{t('ui.howToUseMemphis')}</div>
                          <div className="text-sm space-y-2">
                            <div className="flex items-center">
                              <span className="w-2 h-2 bg-purple-500 rounded-full mr-3"></span>
                              <span className="font-medium text-gray-800">211 {t('ui.communityServices')}</span>
                      </div>
                            <div className="flex items-center">
                              <span className="w-2 h-2 bg-blue-500 rounded-full mr-3"></span>
                              <span className="text-gray-800">311 {t('ui.cityServices')}</span>
                            </div>
                            <div className="flex items-center">
                              <span className="w-2 h-2 bg-red-500 rounded-full mr-3"></span>
                              <span className="text-gray-800">911 {t('ui.emergency')} Services</span>
                            </div>
                            <div className="flex items-center">
                              <span className="w-2 h-2 bg-green-500 rounded-full mr-3"></span>
                              <span className="text-gray-800">{t('ui.multilingualHelp')}</span>
                            </div>
                            <div className="flex items-center">
                              <span className="w-2 h-2 bg-orange-500 rounded-full mr-3"></span>
                              <span className="text-gray-800">{t('ui.voiceInputAvailable')}</span>
                            </div>
                          </div>
                          <div className="mt-3 pt-3 border-t border-gray-200">
                            <div className="text-xs text-gray-600 text-center">
{t('ui.clickToClose')}
                            </div>
                          </div>
                        </div>
                    </div>
                  )}
                  </div>
            </div>
          </div>
        </div>
            
            {/* Online Status */}
            <div className="bg-white px-6 py-2 border-b border-gray-100">
              <div className="flex items-center  justify-center space-x-2">
                <div className="w-2 h-2 bg-green-500 rounded-full "></div>
                <span className="text-gray-700 text-sm font-medium tracking-wide">{t('ui.onlineStatus')}</span>
              </div>
            </div>

            {/* Messages Area */}
            <div className="h-96 overflow-y-auto p-6 bg-gray-50">
              {messages.length === 0 ? (
                <div className="flex flex-col items-center justify-center h-full text-center">
                 
                
                  <div className="text-gray-600 mb-6 max-w-sm text-sm space-y-3">
                    <p className="font-medium text-gray-800">
                      {t('ui.welcomeGreeting')}
                    </p>
                    <p>
                      {t('ui.welcomeDescription')}
                    </p>
                    <p className="text-green-600 font-medium">
                      {t('ui.welcomeLanguages')}
                    </p>
                  </div>
                  
                  {/* Quick Action Buttons */}
                  <div className="w-full max-w-sm space-y-3">
                        <button
                      onClick={() => setInput(t('ui.examplePotholeSlider'))}
                      className="w-full text-left p-3 bg-white hover:bg-blue-50 rounded-lg border border-gray-200 hover:border-blue-300 transition-colors text-sm text-gray-700 hover:shadow-sm"
                        >
                      {t('ui.examplePotholeSlider')}
                        </button>
                  </div>
                </div>
              ) : (
                <div className="space-y-4">
                  {messages.map((message, index) => (
                    <div
                      key={message.id}
                      className={`flex ${message.role === 'user' ? 'justify-end' : 'justify-start'} ${
                        index === messages.length - 1 
                          ? message.role === 'user' 
                            ? 'animate-slide-in-from-right' 
                            : 'animate-slide-in-from-left'
                          : ''
                      }`}
                    >
                      <div
                        className={`max-w-xs px-4 py-3 rounded-2xl shadow-md transition-all duration-300 hover:shadow-lg ${
                          message.role === 'user'
                            ? 'bg-purple-200 text-purple-800 rounded-br-md hover:bg-purple-200'
                            : 'bg-blue-100 text-blue-800 rounded-bl-md border border-gray-200 hover:border-gray-300'
                        }`}
                      >
                        <div className="text-sm leading-relaxed whitespace-pre-wrap tracking-wide">
                          {message.text.split('\n').map((line, index) => {
                            // First check if line contains bold text with **
                            if (line.includes('**')) {
                              // Split by ** patterns and process each part
                              const parts = line.split(/(\*\*[^*]+\*\*)/g);
                              console.log('Processing bold text:', line, 'Parts:', parts);
                              return (
                                <div key={index} className="my-1">
                                  {parts.map((part, partIndex) => {
                                    // Check if this part is wrapped in **
                                    if (part.startsWith('**') && part.endsWith('**') && part.length > 4) {
                                      const boldText = part.slice(2, -2); // Remove ** from start and end
                                      console.log('Making bold:', boldText);
                                      return (
                                        <span key={partIndex} style={{fontWeight: 'bold', color: '#1f2937'}}>
                                          {boldText}
                                        </span>
                                      );
                                    }
                                    return part;
                                  })}
                                </div>
                              );
                            }
                            // Check if line starts with a number and period (like "1. " or "2. ")
                            if (/^\d+\.\s/.test(line.trim())) {
                              return (
                                <div key={index} className="flex items-start space-x-2 my-1">
                                  <span className="font-semibold text-blue-600 flex-shrink-0">
                                    {line.match(/^\d+/)?.[0]}.
                                  </span>
                                  <span className="flex-1">
                                    {line.replace(/^\d+\.\s/, '')}
                                  </span>
                                </div>
                              );
                            }
                            // Check if line starts with "Why this works best:" or "Alternative:" or "Timeline:"
                            if (/^(Why this works best|Alternative|Timeline):/.test(line.trim())) {
                              return (
                                <div key={index} className="my-1">
                                  <span style={{fontWeight: 'bold', color: '#15803d'}}>
                                    {line.match(/^[^:]+/)?.[0]}:
                                  </span>
                                  <span className="ml-1">
                                    {line.replace(/^[^:]+:\s*/, '')}
                                  </span>
                                </div>
                              );
                            }
                            // Regular line
                            return (
                              <div key={index} className={line.trim() === '' ? 'h-2' : ''}>
                                {line}
                              </div>
                            );
                          })}
                        </div>
                        
                        {/* Display attached files for user messages */}
                        {message.attachedFiles && message.attachedFiles.length > 0 && (
                          <div className="mt-2 space-y-2">
                            {message.attachedFiles.map((file, index) => {
                              console.log('Rendering file:', file.name, 'Type:', file.type, 'Has preview:', !!file.preview, 'Preview length:', file.preview?.length);
                              return (
                              <div key={index} className="space-y-1">
                                {/* Image preview for image files - chat size */}
                                {file.type.startsWith('image/') && file.preview && (
                                  <div className="flex justify-center relative">
                                    {/* Always show loading state initially for data URLs */}
                                    <div className="absolute inset-0 flex items-center justify-center bg-gray-100 rounded-lg">
                                      <div className="flex flex-col items-center space-y-2">
                                        <div className="w-6 h-6 border-2 border-blue-500 border-t-transparent rounded-full animate-spin"></div>
                                        <span className="text-xs text-gray-600">Loading image...</span>
                                      </div>
                                    </div>
                                    
                                    {/* Analysis indicator */}
                                    {analyzingImage === file.name && (
                                      <div className="absolute top-2 right-2 bg-blue-500 text-white px-2 py-1 rounded-full text-xs font-medium flex items-center space-x-1">
                                        <div className="w-3 h-3 border border-white border-t-transparent rounded-full animate-spin"></div>
                                        <span>Analyzing...</span>
                                      </div>
                                    )}
                                    <div className="relative group">
                                      <img
                                        src={file.preview}
                                        alt={file.name}
                                        className={`rounded-lg object-cover border border-gray-200 shadow-md hover:shadow-lg transition-all duration-300 cursor-pointer opacity-0 ${
                                          expandedImage === file.preview 
                                            ? 'w-48 h-48' 
                                            : 'w-24 h-24'
                                        }`}
                                        onClick={() => file.preview && toggleImageExpansion(file.preview)}
                                        onLoad={(e) => {
                                          console.log('Image loaded successfully in conversation:', file.name);
                                          // Hide loading overlay and show image
                                          e.currentTarget.style.opacity = '1';
                                          e.currentTarget.parentElement?.parentElement?.querySelector('.absolute')?.remove();
                                        }}
                                        onError={(e) => {
                                          console.log('Image failed to load in conversation:', file.name, e);
                                          // Hide loading overlay on error
                                          e.currentTarget.parentElement?.parentElement?.querySelector('.absolute')?.remove();
                                        }}
                                      />
                                      {/* Hover overlay with expand icon */}
                                      <div className="absolute inset-0 bg-black bg-opacity-0 group-hover:bg-opacity-20 rounded-lg flex items-center justify-center opacity-0 group-hover:opacity-100 transition-all duration-200">
                                        <div className="flex flex-col space-y-2">
                                          <div className="flex space-x-2">
                                            <button
                                              onClick={(e) => {
                                                e.stopPropagation();
                                                file.preview && toggleImageExpansion(file.preview);
                                              }}
                                              className="bg-white bg-opacity-90 hover:bg-opacity-100 rounded-full p-2 shadow-lg transition-all"
                                              title={expandedImage === file.preview ? "Collapse" : "Expand"}
                                            >
                                              <svg className="w-4 h-4 text-gray-700" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                {expandedImage === file.preview ? (
                                                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 9V4.5M9 9H4.5M9 9L3.5 3.5M15 9h4.5M15 9V4.5M15 9l5.5-5.5M9 15v4.5M9 15H4.5M9 15l-5.5 5.5M15 15h4.5M15 15v4.5M15 15l5.5 5.5" />
                                                ) : (
                                                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 8V4m0 0h4M4 4l5 5m11-1V4m0 0h-4m4 0l-5 5M4 16v4m0 0h4m-4 0l5-5m11 5l-5-5m5 5v-4m0 4h-4" />
                                                )}
                                              </svg>
                                            </button>
                                            <button
                                              onClick={(e) => {
                                                e.stopPropagation();
                                                file.preview && openImageModal(file.preview);
                                              }}
                                              className="bg-white bg-opacity-90 hover:bg-opacity-100 rounded-full p-2 shadow-lg transition-all"
                                              title="View full size"
                                            >
                                              <svg className="w-4 h-4 text-gray-700" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0zM10 7v3m0 0v3m0-3h3m-3 0H7" />
                                              </svg>
                                            </button>
                                          </div>
                                          <div className="bg-green-500 text-white rounded-full px-3 py-1 text-xs font-medium shadow-lg flex items-center space-x-1">
                                                <svg className="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                                                </svg>
                                            <span>Auto-Analyzing</span>
                                          </div>
                                        </div>
                                      </div>
                                    </div>
                                  </div>
                                )}
                                
                                {/* Debug: Show if image should be displayed */}
                                {file.type.startsWith('image/') && !file.preview && (
                                  <div className="text-xs text-red-500 text-center">
                                    Debug: No preview available for {file.name}
                                  </div>
                                )}
                                
                                {/* File info - only show for non-image files */}
                                {!file.type.startsWith('image/') && (
                                  <div className="flex items-center space-x-2 text-xs text-gray-600 bg-gray-50 rounded px-2 py-1">
                                    <svg className="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                                    </svg>
                                    <span className="truncate">{file.name}</span>
                                    <span className="text-gray-400 flex-shrink-0">({(file.size / 1024).toFixed(1)} KB)</span>
                                  </div>
                                )}
                              </div>
                              );
                            })}
                          </div>
                        )}
                        
                        {/* Display AI-generated images */}
                        {message.images && message.images.length > 0 && (
                          <div className="mt-2 space-y-2">
                            {message.images.map((image, index) => (
                              <div key={index} className="space-y-1">
                                <div className="flex justify-center relative">
                                  {imageLoadingStates[image.url] && (
                                    <div className="absolute inset-0 flex items-center justify-center bg-gray-100 rounded-lg">
                                      <div className="flex flex-col items-center space-y-2">
                                        <div className="w-6 h-6 border-2 border-blue-500 border-t-transparent rounded-full animate-spin"></div>
                                        <span className="text-xs text-gray-600">Loading image...</span>
                                      </div>
                                    </div>
                                  )}
                                  <img
                                    src={image.url}
                                    alt={image.alt || 'AI generated image'}
                                    className="w-24 h-24 rounded-lg object-cover border border-gray-200 shadow-md hover:shadow-lg transition-shadow cursor-pointer"
                                    onLoad={() => {
                                      setImageLoadingStates(prev => ({
                                        ...prev,
                                        [image.url]: false
                                      }));
                                    }}
                                    onError={() => {
                                      setImageLoadingStates(prev => ({
                                        ...prev,
                                        [image.url]: false
                                      }));
                                    }}
                                  />
                                </div>
                                {image.caption && (
                                  <div className="text-xs text-gray-600 italic text-center">
                                    {image.caption}
                                  </div>
                                )}
                              </div>
                            ))}
                          </div>
                        )}
                        
                        {/* Display relevant pages for assistant messages */}
                        {message.role === 'assistant' && message.relevantPages && message.relevantPages.length > 0 && (
                          <div className="mt-3 space-y-2">
                            {/* Divider line */}
                            <div className="border-t border-gray-200 my-3"></div>
                            <div className="text-xs font-medium text-gray-600 mb-2 tracking-wide">
                              {t('ui.relevantResources')} ({message.relevantPages.length}):
                            </div>
                            {(expandedResources[message.id] ? message.relevantPages : message.relevantPages.slice(0, 5)).map((page, index) => (
                              <div key={index} className="bg-gray-50 rounded-lg p-2 border border-gray-200 shadow-sm">
                                <a
                                  href={page.url}
            target="_blank"
            rel="noopener noreferrer"
                                  className="block hover:bg-gray-100 transition-colors rounded p-1"
                                >
                                  <div className="text-xs font-medium text-blue-700 hover:text-blue-800 overflow-hidden tracking-wide" style={{ display: '-webkit-box', WebkitLineClamp: 2, WebkitBoxOrient: 'vertical' }}>
                                    {translateResourceTitle(page.title)}
                                  </div>
                                  <div className="text-xs text-gray-500 mt-1 truncate tracking-wide">
                                    {page.url}
                                  </div>
                                  <div className="text-xs text-gray-400 mt-1 flex items-center space-x-1 tracking-wide">
                                    <span>{t('ui.relevance')}:</span>
                                    <span className={`font-medium ${
                                      page.similarity > 0.7 ? 'text-green-600' : 
                                      page.similarity > 0.5 ? 'text-yellow-600' : 'text-gray-500'
                                    }`}>
                                      {Math.round(page.similarity * 100)}%
                                    </span>
                                  </div>
          </a>
        </div>
                            ))}
                            {message.relevantPages.length > 5 && (
                              <button
                                onClick={() => setExpandedResources(prev => ({
                                  ...prev,
                                  [message.id]: !prev[message.id]
                                }))}
                                className="w-full text-xs text-blue-600 hover:text-blue-800 py-2 px-3 rounded-lg hover:bg-blue-50 transition-colors font-medium"
                              >
                                {expandedResources[message.id] 
                                  ? `Show Less (${message.relevantPages.length - 5} hidden)` 
                                  : `Show More (${message.relevantPages.length - 5} more resources)`
                                }
                              </button>
                            )}
                          </div>
                        )}
                        
                        {isClient && (
                          <div className="mt-2 flex justify-end">
                            <span className={`text-xs px-2 py-1 rounded-full ${
                              message.role === 'user' 
                                ? 'bg-purple-300 text-purple-800' 
                                : 'bg-blue-200 text-blue-700'
                            }`}>
                              {formattedTimes[message.id] || '...'}
                            </span>
                          </div>
                        )}
                      </div>
                    </div>
                  ))}
                  {isLoading && (
                    <div className="flex justify-start animate-slide-in-from-left">
                      <div className="bg-white text-gray-900 max-w-xs px-4 py-3 rounded-2xl rounded-bl-md border border-gray-200 animate-pulse-glow">
                        <div className="flex items-center space-x-3">
                          <div className="flex space-x-1">
                            <div className="w-2 h-2 bg-blue-500 rounded-full animate-bounce"></div>
                            <div className="w-2 h-2 bg-blue-500 rounded-full animate-bounce" style={{ animationDelay: '0.1s' }}></div>
                            <div className="w-2 h-2 bg-blue-500 rounded-full animate-bounce" style={{ animationDelay: '0.2s' }}></div>
                          </div>
                          <span className="text-sm font-medium">{t('ui.bealeThinking')}</span>
                        </div>
                      </div>
                    </div>
                  )}
                  <div ref={messagesEndRef} />
                </div>
              )}
            </div>

            {/* Input Area */}
            <div className="border-t border-gray-200 p-4 bg-white shadow-sm">
              <div className="flex space-x-3">
                <div className="flex-1 relative">
                  <input
                    type="text"
                    value={input}
                    onChange={(e) => setInput(e.target.value)}
                    onKeyPress={handleKeyPress}
                    placeholder={t('ui.enterMessage')}
                    className="w-full px-4 py-3 pr-20 border border-gray-300 rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent bg-white text-gray-900 placeholder-gray-500"
                    disabled={isLoading}
                  />
                  
                  {/* Hidden file input */}
                  <input
                    ref={fileInputRef}
                    type="file"
                    multiple
                    onChange={handleFileSelect}
                    className="hidden"
                    accept="image/*,.pdf,.doc,.docx,.txt"
                  />
                  <div className="absolute right-3 top-1/2 transform -translate-y-1/2 flex items-center space-x-2">
                    {/* Speech to Text Button */}
                    {isSupported && (
                      <button
                        onClick={isListening ? stopListening : startListening}
                        disabled={isLoading}
                        className={`p-2 rounded-lg transition-colors ${
                          isListening
                            ? 'bg-red-100 text-red-600 hover:bg-red-200'
                            : 'text-gray-400 hover:text-gray-600 hover:bg-gray-100'
                        } ${isLoading ? 'opacity-50 cursor-not-allowed' : ''}`}
                        title={isLoading ? t('ui.bealeThinking') : (isListening ? 'Stop listening' : 'Start voice input')}
                      >
                        {isListening ? (
                          <svg className="w-4 h-4" fill="currentColor" viewBox="0 0 24 24">
                            <path d="M6 6h12v12H6z" />
                          </svg>
                        ) : (
                          <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 11a7 7 0 01-7 7m0 0a7 7 0 01-7-7m7 7v4m0 0H8m4 0h4m-4-8a3 3 0 01-3-3V5a3 3 0 116 0v6a3 3 0 01-3 3z" />
                          </svg>
                        )}
                      </button>
                    )}
                    {/* Emoji Button */}
                    <button 
                      onClick={toggleEmojiPicker}
                      disabled={isLoading && !isListening}
                      className={`text-gray-400 hover:text-gray-600 hover:bg-gray-100 p-2 rounded-lg transition-colors ${(isLoading && !isListening) ? 'opacity-50 cursor-not-allowed' : ''}`}
                      title={(isLoading && !isListening) ? t('ui.bealeThinking') : 'Add emoji'}
                    >
                      <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24" strokeWidth={1.5}>
                        <circle cx="12" cy="12" r="10"/>
                        <path d="M8 14s1.5 2 4 2 4-2 4-2"/>
                        <line x1="9" y1="9" x2="9.01" y2="9"/>
                        <line x1="15" y1="9" x2="15.01" y2="9"/>
                    </svg>
                    </button>
                    {/* Attachment Button */}
                    <button 
                      onClick={triggerFileInput}
                      disabled={isLoading && !isListening}
                      className={`text-gray-400 hover:text-gray-600 hover:bg-gray-100 p-2 rounded-lg transition-colors ${(isLoading && !isListening) ? 'opacity-50 cursor-not-allowed' : ''}`}
                      title={(isLoading && !isListening) ? t('ui.bealeThinking') : 'Click to upload images, PDFs, or documents (max 10MB). Images will be automatically analyzed by Beale.'}
                    >
                      <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24" strokeWidth={1.5}>
                        <path d="M21.44 11.05l-9.19 9.19a6 6 0 01-8.49-8.49l9.19-9.19a4 4 0 015.66 5.66L9.64 16.2a2 2 0 01-2.83-2.83l8.49-8.49"/>
                    </svg>
                    </button>
                  </div>
                </div>
                <button
                  onClick={sendMessage}
                  disabled={(() => {
                    if (isLoading) return true;
                    if (!input.trim() && attachedFiles.length === 0) return true;
                    
                    // Check if any images are still loading or missing previews
                    const imageFiles = attachedFiles.filter(f => f.type.startsWith('image/'));
                    const stillLoading = imageFiles.filter(f => loadingImages.has(f.name));
                    const missingPreviews = imageFiles.filter(f => !filePreviews[f.name]);
                    return stillLoading.length > 0 || missingPreviews.length > 0;
                  })()}
                  className="w-12 h-12 bg-blue-600 hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed transition-all duration-200 rounded-full flex items-center justify-center shadow-lg hover:shadow-xl transform hover:scale-105 disabled:transform-none disabled:scale-100 active:scale-95"
                  title="Send message"
                >
                  <svg className="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 19l9 2-9-18-9 18 9-2zm0 0v-8" />
                  </svg>
                </button>
              </div>
              
              {/* Emoji Picker */}
              {showEmojiPicker && (
                <div className="emoji-picker absolute bottom-20 left-4 bg-white border border-gray-200 rounded-lg shadow-lg p-3 z-50">
                  <div className="grid grid-cols-8 gap-2">
                    {['😀', '😃', '😄', '😁', '😆', '😅', '😂', '🤣', '😊', '😇', '🙂', '🙃', '😉', '😌', '😍', '🥰', '😘', '😗', '😙', '😚', '😋', '😛', '😝', '😜', '🤪', '🤨', '🧐', '🤓', '😎', '🤩', '🥳', '😏'].map((emoji) => (
                      <button
                        key={emoji}
                        onClick={() => insertEmoji(emoji)}
                        className="text-2xl hover:bg-gray-100 rounded p-1 transition-colors"
                      >
                        {emoji}
                      </button>
                    ))}
                  </div>
                </div>
              )}
              
              {/* Attached Files Display */}
              {attachedFiles.length > 0 && (
                <div className="mt-3 space-y-2">
                  <div className="text-xs font-medium text-gray-600 tracking-wide">Attached Files:</div>
                  {attachedFiles.map((file, index) => (
                    <div key={index} className="flex items-center justify-between bg-gray-50 rounded-lg p-2">
                      <div className="flex items-center space-x-2">
                        {loadingImages.has(file.name) ? (
                          <div className="w-4 h-4 flex items-center justify-center">
                            <div className="w-3 h-3 border-2 border-blue-500 border-t-transparent rounded-full animate-spin"></div>
                          </div>
                        ) : (
                          <svg className="w-4 h-4 text-gray-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                          </svg>
                        )}
                        <span className="text-sm text-gray-700 tracking-wide">{file.name}</span>
                        <span className="text-xs text-gray-500">({(file.size / 1024).toFixed(1)} KB)</span>
                        {loadingImages.has(file.name) && (
                          <span className="text-xs text-blue-600 font-medium">Loading...</span>
                        )}
                      </div>
                      <button
                        onClick={() => removeFile(index)}
                        className="text-red-500 hover:text-red-700 p-1"
                      >
                        <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                        </svg>
                      </button>
                    </div>
                  ))}
                </div>
              )}
              
              
              {/* Voice input status */}
              {isListening && (
                <div className="mt-2 flex items-center space-x-2 text-sm text-red-600">
                  <div className="flex space-x-1">
                    <div className="w-2 h-2 bg-red-500 rounded-full animate-pulse"></div>
                    <div className="w-2 h-2 bg-red-500 rounded-full animate-pulse" style={{ animationDelay: '0.2s' }}></div>
                    <div className="w-2 h-2 bg-red-500 rounded-full animate-pulse" style={{ animationDelay: '0.4s' }}></div>
                  </div>
                  <span>Listening... Speak now</span>
                </div>
              )}
              
              {/* Voice command feedback */}
              {voiceCommand && (
                <div className="mt-2 flex items-center space-x-2 text-sm text-green-600">
                  <div className="w-2 h-2 bg-green-500 rounded-full animate-pulse"></div>
                  <span>{voiceCommand}</span>
                </div>
              )}
              
              {/* Speech support notice */}
              {!isSupported && (
                <div className="mt-2 text-xs text-gray-500">
                  Voice input not supported in this browser. Please use Chrome, Edge, or Safari.
                </div>
              )}
          </div>

          {/* Footer */}
            <div className="bg-gray-50 px-6 py-3 border-t border-gray-200">
              <div className="flex items-center justify-center space-x-1 text-xs text-gray-500">
                <span>{t('ui.poweredBy')}</span>
                <div className="flex items-center space-x-1">
                  <span className="font-semibold text-blue-600">Coriano Harris</span>
              </div>
              </div>
              <div className="text-center mt-1">
                <a 
                  href="mailto:lme@corianoharris.com" 
                  className="text-xs text-blue-600 hover:text-blue-800 hover:underline"
                >
                  me@corianoharris.com
                </a>
              </div>
            </div>
          </div>
        )}
      </div>

      {/* Image Modal */}
      {showImageModal && (
        <div className="fixed inset-0 bg-black bg-opacity-75 flex items-center justify-center z-50" onClick={closeImageModal}>
          <div className="relative max-w-4xl max-h-4xl p-4">
            <button
              onClick={closeImageModal}
              className="absolute top-4 right-4 bg-white bg-opacity-90 hover:bg-opacity-100 rounded-full p-2 shadow-lg transition-all z-10"
              title="Close"
            >
              <svg className="w-6 h-6 text-gray-700" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
              </svg>
            </button>
            <img
              src={modalImageSrc}
              alt="Full size image"
              className="max-w-full max-h-full rounded-lg shadow-2xl"
              onClick={(e) => e.stopPropagation()}
            />
          </div>
        </div>
      )}
    </div>
  );
}
